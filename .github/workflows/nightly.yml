name: Nightly

on:
  workflow_dispatch:
  schedule:
    - cron:  "0 0 * * 1-5"

jobs:
  fedora:
    name: Linux Fedora (${{ matrix.build-type }}, ${{ matrix.compiler }}, ${{ matrix.cxx11-standard }})
    runs-on: ubuntu-latest
    container: dynawo/dynawo-ci-nightly-fedora:latest
    strategy:
      matrix:
        build-type: [Release, Debug]
        cxx11-standard: [YES, NO]
        compiler: [GCC, CLANG]
      fail-fast: false
    env:
      DYNAWO_INSTALL_OPENMODELICA: /opt/OpenModelica/Install
      DYNAWO_SRC_OPENMODELICA: /opt/OpenModelica/Source
      DYNAWO_RESULTS_SHOW: "false"
      DYNAWO_BUILD_TYPE: ${{ matrix.build-type }}
      DYNAWO_CXX11_ENABLED: ${{ matrix.cxx11-standard }}
      DYNAWO_COMPILER: ${{ matrix.compiler }}
      DYNAWO_NB_PROCESSORS_USED: 2
      COMPILER_FOLDER: "${{ matrix.compiler == 'GCC' && 'gcc8' || 'clang4.2.1' }}"
      ZIP_NAME: "dynawo-algorithms-fedora-${{ matrix.compiler }}-${{ matrix.build-type }}-${{ (matrix.cxx11-standard) == 'YES' && 'cxx11' || 'cxx99' }}.zip"
      ZIP_DYNAWO: "dynawo-fedora-${{ matrix.compiler }}-${{ matrix.build-type }}-${{ (matrix.cxx11-standard) == 'YES' && 'cxx11' || 'cxx99' }}.zip"

    steps:
      - name: üóûÔ∏è Checkout
        uses: actions/checkout@v2

      - name: üööÔ∏è Fetch Dynawo
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: "sheosi/dynawo"
          version: "tags/nightly"
          file: "${{ env.ZIP_DYNAWO }}"
          target: "dynawo"
          token: "${{ secrets.GITHUB_TOKEN }}"

      - name: ü§î Load persistent build files
        uses: actions/cache@v2
        with:
          # A list of files, directories, and wildcard patterns to cache and restore
          path: |
            build
            install
          # An explicit key for restoring and saving the cache
          key: ${{ runner.os }}-cmake-${{ hashFiles("**/CMakeCache.lock") }}

      - name: üî® Build
        run: |
          export DYNAWO_HOME=$(pwd)
          util/envDynawoAlgorithms.sh build-user

      - name: üßêÔ∏è Tests
        if: ${{ matrix.build-type == "Debug" }}
        run: |
          export DYNAWO_HOME=$(pwd)
          util/envDynawoAlgorithms.sh build-tests
          util/envDynawo.sh nrt
          
      
      - name: üìã Prepare files
        run: |
          export DYNAWO_HOME=$(pwd)
          util/envDynawoAlgorithms.sh deploy
      
      - name: üì¶ Archive Release
        uses: thedoctor0/zip-release@master
        with:
          filename: "${{ env.ZIP_NAME }}"
          directory: "deploy/${{ env.COMPILER_FOLDER }}/"

      - name: üéâ Release
        uses: ncipollo/release-action@v1
        with:
          name: "üåëÔ∏è Nightly"
          body: "Dynawo's üåëÔ∏è nightly release. Compiled on *release* settings.\n\n **Don't use it for production**"
          tag: "nightly"
          artifacts: "deploy/${{ env.COMPILER_FOLDER }}/${{ env.ZIP_NAME }}"
          allowUpdates: true
          artifactErrorsFailBuild: true
          token: ${{ secrets.GITHUB_TOKEN }}

  bionic:
    name: Linux Bionic
    runs-on: ubuntu-latest
    container: dynawo/dynawo-ci-nightly-bionic:latest
    env:
      DYNAWO_RESULTS_SHOW: "false"
      DYNAWO_BUILD_TYPE: Release
      DYNAWO_CXX11_ENABLED: YES
      DYNAWO_COMPILER: GCC
      DYNAWO_PYTHON_COMMAND: python3
      DYNAWO_NB_PROCESSORS_USED: 2
      COMPILER_FOLDER: gcc7
      ZIP_NAME: "dynawo-algorithms-ubuntu-GCC-Release-cxx11.zip"
      ZIP_DYNAWO: "dynawo-ubuntu-GCC-Release-cxx11.zip"
      

    steps:
      - name: üóûÔ∏è Checkout
        uses: actions/checkout@v2
    
      - name: üööÔ∏è Fetch Dynawo
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: "sheosi/dynawo"
          version: "tags/nightly"
          file: "${{ env.ZIP_DYNAWO }}"
          target: "dynawo"
          token: "${{ secrets.GITHUB_TOKEN }}"
      
      - name: ü§î Load persistent build files
        uses: actions/cache@v2
        with:
          # A list of files, directories, and wildcard patterns to cache and restore
          path: |
            build
            install
          # An explicit key for restoring and saving the cache
          key: ${{ runner.os }}-cmake-${{ hashFiles("**/CMakeCache.lock") }}

      - name: üî® Build
        env:
          DYNAWO_INSTALL_OPENMODELICA: ${{ runner.workspace }}/OpenModelica/Install
          DYNAWO_SRC_OPENMODELICA: ${{ runner.workspace }}/OpenModelica/Source
        run: |
          export DYNAWO_HOME=$(pwd)
          util/envDynawoAlgorithms.sh build

      - name: üßêÔ∏è Tests
        env:
          DYNAWO_INSTALL_OPENMODELICA: ${{ runner.workspace }}/OpenModelica/Install
          DYNAWO_SRC_OPENMODELICA: ${{ runner.workspace }}/OpenModelica/Source
        run: |
          export DYNAWO_HOME=$(pwd)
          util/envDynawoAlgorithms.sh nrt

      - name: üìã Prepare files
        env:
          DYNAWO_INSTALL_OPENMODELICA: ${{ runner.workspace }}/OpenModelica/Install
          DYNAWO_SRC_OPENMODELICA: ${{ runner.workspace }}/OpenModelica/Source
        run: |
          export DYNAWO_HOME=$(pwd)
          util/envDynawoAlgorithms.sh deploy

      - name: üì¶ Archive Release
        uses: thedoctor0/zip-release@master
        with:
            filename: "${{ env.ZIP_NAME }}"
            directory: "deploy/${{ env.COMPILER_FOLDER }}/"
      
      - name: üéâ Release
        uses: ncipollo/release-action@v1
        with:
            name: "üåëÔ∏è Nightly"
            body: "Dynawo's üåëÔ∏è nightly release. Compiled on *release* settings.\n\n **Don't use it for production**"
            tag: "nightly"
            artifacts: "deploy/${{ env.COMPILER_FOLDER }}/${{ env.ZIP_NAME }}"
            allowUpdates: true
            artifactErrorsFailBuild: true
            token: ${{ secrets.GITHUB_TOKEN }}

  omc:
    name: Linux OMC Build (${{ matrix.compiler }})
    runs-on: ubuntu-latest
    container: dynawo/dynawo-ci-nightly-fedora:latest
    strategy:
      matrix:
        compiler: [GCC, CLANG]
    env:
      DYNAWO_BUILD_TYPE: Release
      DYNAWO_CXX11_ENABLED: YES
      DYNAWO_COMPILER: ${{ matrix.compiler }}
      COMPILER_FOLDER: "${{ matrix.compiler == 'GCC' && 'gcc8' || 'clang4.2.1' }}"
      ZIP_NAME: "dynawo-algorithms-omc-${{ matrix.compiler }}-Release-cxx11.zip"
      ZIP_DYNAWo: "dynawo-omc-${{ matrix.compiler }}-Release-cxx11.zip"

    steps:
      - name: üóûÔ∏è Checkout
        uses: actions/checkout@v2

      - name: üööÔ∏è Fetch Dynawo
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: "sheosi/dynawo"
          version: "tags/nightly"
          file: "${{ env.ZIP_DYNAWO }}"
          target: "dynawo"
          token: "${{ secrets.GITHUB_TOKEN }}"

      - name: ü§î Load persistent build files
        uses: actions/cache@v2
        with:
          # A list of files, directories, and wildcard patterns to cache and restore
          path: |
            build
            install
          # An explicit key for restoring and saving the cache
          key: ${{ runner.os }}-cmake-${{ hashFiles("**/CMakeCache.lock") }}

      - name: üî® Build
        env:
          DYNAWO_INSTALL_OPENMODELICA: ${{ runner.workspace }}/OpenModelica/Install
          DYNAWO_SRC_OPENMODELICA: ${{ runner.workspace }}/OpenModelica/Source
        run: |
          export DYNAWO_HOME=$(pwd)
          util/envDynawoAlgorithms.sh build-omcDynawo
          
      - name: Install deps
        run: sudo dnf install boost-devel
      
      - name: üìã Prepare files
        env:
          DYNAWO_INSTALL_OPENMODELICA: ${{ runner.workspace }}/OpenModelica/Install
          DYNAWO_SRC_OPENMODELICA: ${{ runner.workspace }}/OpenModelica/Source
        run: |
          export DYNAWO_HOME=$(pwd)
          util/envDynawoAlgorithms.sh deploy
      
      - name: üì¶ Archive Release
        uses: thedoctor0/zip-release@master
        with:
            filename: "${{ env.ZIP_NAME }}"
            directory: "deploy/${{ env.COMPILER_FOLDER }}/"
      
      - name: üéâ Release
        uses: ncipollo/release-action@v1
        with:
            name: "üåëÔ∏è Nightly"
            body: "Dynawo's üåëÔ∏è nightly release. Compiled on *release* settings.\n\n **Don't use it for production**"
            tag: "nightly"
            artifacts: "deploy/${{ env.COMPILER_FOLDER }}/${{ env.ZIP_NAME }}"
            allowUpdates: true
            artifactErrorsFailBuild: true
            token: ${{ secrets.GITHUB_TOKEN }}

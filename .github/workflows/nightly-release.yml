name: Nightly Release

on:
  workflow_dispatch:
  schedule:
    - cron:  "0 0 * * 1-5"

jobs:
  fedora:
    name: Linux Fedora (Release, GCC, cxx11)
    runs-on: ubuntu-latest
    container: dynawo/dynawo-distribution-cxx11:latest
    strategy:
      fail-fast: false
    env:
      DYNAWO_INSTALL_OPENMODELICA: /opt/OpenModelica/Install
      DYNAWO_SRC_OPENMODELICA: /opt/OpenModelica/Source
      DYNAWO_RESULTS_SHOW: "false"
      DYNAWO_BUILD_TYPE: Release
      DYNAWO_CXX11_ENABLED: YES
      DYNAWO_NB_PROCESSORS_USED: 2
      DYNAWO_FORCE_CXX11_ABI: "true"
      VERSION: "1.3.0"
      GH_API: ${{ github.api_url }}/repos/${{ github.repository }}
      CURL_JSON: 'curl -s -H "Content-Type": "application/json"'


    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Fetch Dynawo
        run: |
          download_asset() {
            ASSET_URL=$( \
              CURL_JSON  -u "user: ${{ secrets.GITHUB_TOKEN }}"   \
              ${{ github.api_url }}/repos/$1/releases/tags/nightly | python3 -c \
              "import sys, json;l=[x for x in json.load(sys.stdin)['assets'] if x['name']=='$2'];print(str(l[0]['url']) if l else '')" \
            )
            
            if [ ! -z $ASSET_URL ]; then
              curl \
                --remote-header-name \
                --location \
                -H "Accept: application/octet-stream" \
                -u "user: ${{ secrets.GITHUB_TOKEN }}" \
                "$ASSET_URL" \
                --create-dirs \
                --limit-rate 2M \
                -o "$2"
            else
              echo "Asset not found $2 in $1"
              exit 1
            fi
          }
          
          download_asset sheosi/dynawo Dynawo_headers_V${VERSION}.zip
          
      - name: Extract Dynawo
        run: |
          unzip -qq "Dynawo_headers_V${VERSION}.zip"
          cd ..
          
          # Write dynawoEnv file, which isn't contained inside the distribution
          cat > dynawo-algorithms/dynawo/dynawoEnv.txt  << EOF 
          DYNAWO_ADEPT_INSTALL_DIR="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11/adept"
          DYNAWO_BOOST_HOME="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11/boost"
          DYNAWO_BOOST_HOME_DEFAULT="false"
          DYNAWO_BRANCH_NAME="no-branch"
          DYNAWO_BROWSER="firefox"
          DYNAWO_BUILD_DIR="/__w/dynawo/dynawo/build/gcc5.3.1/no-branch/Release-cxx11/shared/dynawo"
          DYNAWO_BUILD_TESTS="OFF"
          DYNAWO_BUILD_TESTS_COVERAGE="OFF"
          DYNAWO_BUILD_TYPE="Release"
          DYNAWO_CMAKE_BUILD_OPTION="-j 2"
          DYNAWO_CMAKE_GENERATOR="Unix Makefiles"
          DYNAWO_COMPILER="GCC"
          DYNAWO_COMPILER_NAME="gcc"
          DYNAWO_COMPILER_VERSION="5.3.1"
          DYNAWO_CURVES_TO_HTML_DIR="/__w/dynawo/dynawo/util/curvesToHtml"
          DYNAWO_CXX11_ENABLED="YES"
          DYNAWO_CXX_COMPILER="/usr/bin/g++"
          DYNAWO_C_COMPILER="/usr/bin/gcc"
          DYNAWO_DEBUG_COMPILER_OPTION="-O0"
          DYNAWO_DEPLOY_DIR="/__w/dynawo/dynawo/deploy/gcc5.3.1/shared/dynawo"
          DYNAWO_ENV_DYNAWO="/__w/dynawo/dynawo/util/envDynawo.sh"
          DYNAWO_FLOT_DOWNLOAD_URL="https://github.com/flot/flot/archive"
          DYNAWO_FORCE_CXX11_ABI="true"
          DYNAWO_GMOCK_HOME_DEFAULT="true"
          DYNAWO_GTEST_HOME_DEFAULT="true"
          DYNAWO_HOME="/__w/dynawo/dynawo"
          DYNAWO_INSTALL_DIR="/__w/dynawo/dynawo/install/gcc5.3.1/no-branch/Release-cxx11/shared/dynawo"
          DYNAWO_INSTALL_OPENMODELICA="/opt/OpenModelica/Install"
          DYNAWO_JQUERY_DOWNLOAD_URL="https://github.com/jquery/jquery/archive"
          DYNAWO_LIBARCHIVE_HOME="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11/libarchive"
          DYNAWO_LIBARCHIVE_HOME_DEFAULT="false"
          DYNAWO_LIBIIDM_EXTENSIONS="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11/libiidm/lib"
          DYNAWO_LIBIIDM_HOME="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11/libiidm"
          DYNAWO_LIBIIDM_INSTALL_DIR="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11/libiidm"
          DYNAWO_LIBXML2_HOME="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11/libxml2"
          DYNAWO_LIBXML2_HOME_DEFAULT="false"
          DYNAWO_LIBXML_HOME="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11/libxml"
          DYNAWO_LIBXML_INSTALL_DIR="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11/libxml"
          DYNAWO_LIBZIP_HOME="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11/libzip"
          DYNAWO_LIBZIP_INSTALL_DIR="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11/libzip"
          DYNAWO_LOCALE="en_GB"
          DYNAWO_MODELICA_LIB="3.2.3"
          DYNAWO_NB_PROCESSORS_USED="2"
          DYNAWO_NICSLU_INSTALL_DIR="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11/nicslu"
          DYNAWO_NRT_DIFF_DIR="/__w/dynawo/dynawo/util/nrt_diff"
          DYNAWO_NRT_DIR="/__w/dynawo/dynawo/nrt"
          DYNAWO_OPENMODELICA_VERSION="1_13_2"
          DYNAWO_PDFVIEWER="xdg-open"
          DYNAWO_PYTHON_COMMAND="python"
          DYNAWO_RESOURCES_DIR="/__w/dynawo/dynawo/install/gcc5.3.1/no-branch/Release-cxx11/shared/dynawo/share:/__w/dynawo/dynawo/install/gcc5.3.1/no-branch/Release-cxx11/shared/dynawo/share/xsd"
          DYNAWO_RESULTS_SHOW="false"
          DYNAWO_SCRIPTS_DIR="/__w/dynawo/dynawo/install/gcc5.3.1/no-branch/Release-cxx11/shared/dynawo/sbin"
          DYNAWO_SHARED_LIBRARY_SUFFIX="so"
          DYNAWO_SRC_DIR="/__w/dynawo/dynawo/dynawo"
          DYNAWO_SRC_OPENMODELICA="/opt/OpenModelica/Source"
          DYNAWO_SUITESPARSE_INSTALL_DIR="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11/suitesparse"
          DYNAWO_SUNDIALS_INSTALL_DIR="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11/sundials"
          DYNAWO_THIRD_PARTY_BUILD_DIR="/__w/dynawo/dynawo/build/3rdParty/gcc5.3.1/shared/Release-cxx11"
          DYNAWO_THIRD_PARTY_BUILD_DIR_VERSION="/__w/dynawo/dynawo/build/3rdParty/gcc5.3.1/shared/Release-cxx11"
          DYNAWO_THIRD_PARTY_INSTALL_DIR="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11"
          DYNAWO_THIRD_PARTY_INSTALL_DIR_VERSION="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11"
          DYNAWO_THIRD_PARTY_SRC_DIR="/__w/dynawo/dynawo/dynawo/3rdParty"
          DYNAWO_TIMELINE_FILTER_DIR="/__w/dynawo/dynawo/util/timeline_filter"
          DYNAWO_USE_ADEPT="YES"
          DYNAWO_USE_LEGACY_IIDM="NO"
          DYNAWO_USE_XSD_VALIDATION="true"
          DYNAWO_XERCESC_INSTALL_DIR="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11/xerces-c"
          DYNAWO_ZLIB_HOME="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11/zlib"
          DYNAWO_ZLIB_HOME_DEFAULT="false"
          EOF

      - name: Build
        run: |
          export DYNAWO_HOME=$(pwd)/dynawo
          export DYNAWO_ALGORITHMS_HOME=$(pwd)
          util/envDynawoAlgorithms.sh build
      
      - name: Prepare files
        run: |
          export DYNAWO_HOME=$(pwd)/dynawo
          export DYNAWO_ALGORITHMS_HOME=$(pwd)
          util/envDynawoAlgorithms.sh distrib
          util/envDynawoAlgorithms.sh distrib-headers
      - name: INFO. Files created in distributions folder
        run: du -hs distributions/*

      - name: Delete previous nightly release
        run: |
          source .github/workflows/tools.sh
          echo "Obtain previous release id and delete it"
          RELEASE_ID=$($CURL_JSON "$GH_API/releases" | python3 -c 'import sys, json; releases=[release["id"] for release in json.load(sys.stdin) if release["tag_name"]=="nightly"]; print(releases[0] if releases else "")')
          if [ ! -z "$RELEASE_ID" ]; then
            echo "Release id with tag 'nightly' found: $RELEASE_ID"
            echo "Delete release $RELEASE_ID ..."
            curl \
              --request DELETE \
              --url "$GH_API/releases/$RELEASE_ID" \
              --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}"
            echo "Wait for release to be deleted ..."
            wait_for_http_code "$GH_API/releases/$RELEASE_ID" 404
          else
            echo "Previous nightly release not found"
          fi
      - name: INFO. List of all releases after deleting nightly
        run: $CURL_JSON "$GH_API/releases"


      - name: Delete previous nightly tag
        run: |
          source .github/workflows/tools.sh
          echo "Delete previous tag. Won't fail if it does not exist"
          curl \
            --request DELETE \
            --url "$GH_API/git/refs/tags/nightly" \
            --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            --header "Content-Type: application/json"
          echo "Wait for tag to be deleted ..."
          wait_for_http_code "$GH_API/git/refs/tags/nightly" 404
      - name: INFO. Nightly tag should not be found
        run: $CURL_JSON "$GH_API/git/refs/tags/nightly"

      - name: Get last commit in master
        id: commit_id
        run: |
          echo "Obtaining refs/heads/master ..."
          HEAD_MASTER=$($CURL_JSON "$GH_API/git/refs/heads/master")
          echo "Head master:"
          echo $HEAD_MASTER
          SHA_HEAD_MASTER=$(echo $HEAD_MASTER | python3 -c 'import sys, json; print(json.load(sys.stdin)["object"]["sha"])')
          echo "Last commit in master has SHA = $SHA_HEAD_MASTER"
          echo "MASTER_COMMIT_ID=$SHA_HEAD_MASTER" >> $GITHUB_ENV
      - name: INFO. Check last commit in master
        run: echo "Last commit in master SHA = $MASTER_COMMIT_ID"

      - name: Create tag Nightly
        run: |
          source .github/workflows/tools.sh
          echo "Create tag nightly based on last commit in master branch"
          curl \
            --request POST \
            --url "$GH_API/git/refs" \
            --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            --header "Content-Type: application/json" \
            --data '{
                "ref": "refs/tags/nightly",
                "sha": "'$MASTER_COMMIT_ID'"
                }'
          echo "Wait for tag to be created ..."
          wait_for_http_code "$GH_API/git/refs/tags/nightly" 200
      - name: INFO. Tag nightly created"
        run: $CURL_JSON "$GH_API/git/refs/tags/nightly"

      - name: Create release nightly
        run: |
          source .github/workflows/tools.sh
          echo "Create release nightly"
          curl \
            --request POST \
            --url "$GH_API/releases" \
            --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            --header "Content-Type: application/json" \
            --data '{
                "tag_name" : "nightly",
                "target_commitish" : "'$MASTER_COMMIT_ID'",
                "name" : "Nightly",
                "body" : "Dynawo'"'"'s nightly release. Compiled on *release* settings.\n\n**Don'"'"'t use it for production**",
                "draft" : false,
                "prerelease" : true
                }'
          echo "Wait for the release to be published ..."
          wait_for_http_code "$GH_API/releases/tags/nightly" 200
      - name: INFO. Release object created for tag nightly"
        run: $CURL_JSON "$GH_API/releases/tags/nightly"

      - name: Upload assets for release
        run: |
          source .github/workflows/tools.sh
          echo "Obtain upload and assets urls from created release:"
          RELEASE=$($CURL_JSON "$GH_API/releases/tags/nightly")
          UPLOAD_URL=$(echo ${RELEASE} | python3 -c 'import sys, json; release = json.load(sys.stdin); print(str(release["upload_url"]))' | grep -o ".*assets")
          echo "Release upload URL = $UPLOAD_URL"
          ASSETS_URL=$(echo ${RELEASE} | python3 -c 'import sys, json; release = json.load(sys.stdin); print(str(release["assets_url"]))')
          echo "Release assets URL = $ASSETS_URL"
          echo "ASSETS_URL=$ASSETS_URL" >> $GITHUB_ENV
          echo "Upload assets"
          for FILE in distributions/*zip; do
            [ -f "$FILE" ] || break
            echo "Upload asset $FILE"
            upload_zip_file $UPLOAD_URL $FILE ${{ secrets.GITHUB_TOKEN }}
          done
      - name: INFO. Release assets
        run: $CURL_JSON $ASSETS_URL

name: Nightly Release

on:
  workflow_dispatch:
  schedule:
    - cron:  "0 0 * * 1-5"

jobs:
  fedora:
    name: Linux Fedora (Release, GCC, cxx11)
    runs-on: ubuntu-latest
    container: dynawo/dynawo-distribution-cxx11:latest
    strategy:
      fail-fast: false
    env:
      DYNAWO_INSTALL_OPENMODELICA: /opt/OpenModelica/Install
      DYNAWO_SRC_OPENMODELICA: /opt/OpenModelica/Source
      DYNAWO_RESULTS_SHOW: "false"
      DYNAWO_BUILD_TYPE: Release
      DYNAWO_CXX11_ENABLED: YES
      DYNAWO_NB_PROCESSORS_USED: 2
      DYNAWO_FORCE_CXX11_ABI: "true"
      VERSION: "1.3.0"
      GH_API: https://api.github.com/repos/sheosi/dynawo-algorithms
      CURL_JSON: 'curl -s -H "Content-Type": "application/json"'
      CURL_ZIP: 'curl -H "Content-Type": "application/zip" --retry 20 --retry-delay 0 --retry-max-time 40'


    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Fetch Dynawo
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: "sheosi/dynawo"
          version: "tags/nightly"
          file: "Dynawo_headers_V${{ env.VERSION }}"
          target: "dynawo.zip"
          token: "${{ secrets.GITHUB_TOKEN }}"
          
      - name: Extract Dynawo
        run: |
          unzip -qq "dynawo.zip"
          cd ..

      - name: Build
        run: |
          export DYNAWO_HOME=$(pwd)/dynawo
          export DYNAWO_ALGORITHMS_HOME=$(pwd)
          util/envDynawoAlgorithms.sh build
      
      - name: Prepare files
        run: |
          export DYNAWO_HOME=$(pwd)/dynawo
          export DYNAWO_ALGORITHMS_HOME=$(pwd)
          util/envDynawoAlgorithms.sh distrib
          util/envDynawoAlgorithms.sh distrib-headers

      - name: Delete old tag and release
        run: |
          $CURL_JSON -u "user:${{ secrets.GITHUB_TOKEN }}" -w '%{http_code}\n'  -X DELETE  "$GH_API/git/refs/tags/nightly"
          RELEASE_ID=$( $CURL_JSON -X GET "$GH_API/releases" |  python3 -c 'import sys, json;l=[x for x in json.load(sys.stdin) if x["tag_name"]=="nightly"];print(str(l[0]["id"]) if l else "")')
          
          if [ ! -z "$RELEASE_ID" ]; then
            $CURL_JSON -u "user:${{ secrets.GITHUB_TOKEN }}" -w '%{http_code}\n' -X DELETE "$GH_API/releases/$RELEASE_ID"
          else
            echo "Nightly release not found, won't be deleted"
          fi

      - name: Get last commit in master
        id: commit_id
        run: |
          echo "::set-output name=MASTER_COMMIT_ID::$($CURL_JSON -X GET  $GH_API/git/refs/heads/master| python3 -c 'import sys, json; print(json.load(sys.stdin)["object"]["sha"])')"

      - name: Create Nightly Tag
        run: |
          $CURL_JSON -u "user:${{ secrets.GITHUB_TOKEN }}" -w '%{http_code}\n' -X POST  -d '{"ref":"refs/tags/nightly", "sha":"${{ steps.commit_id.outputs.MASTER_COMMIT_ID }}" }'  "$GH_API/git/refs"


      - name: Release
        run: |
          $CURL_JSON -X POST -u "user:${{ secrets.GITHUB_TOKEN }}" $GH_API/releases -d $'{"tag_name":"nightly", "target_commitish": "${{ steps.commit_id.outputs.MASTER_COMMIT_ID }}", "name": "Nightly", "body": "Dynawo\'s nightly release. Compiled on *release* settings.\\n\\n **Don\'t use it for production**", "draft": false, "prerelease": true }'
          sleep 10 # Wait for release to be published
          UPLOAD_URL=$(curl -s -X GET $GH_API/releases | python3 -c 'import sys, json;l=[x for x in json.load(sys.stdin) if x["tag_name"]=="nightly"];print(str(l[0]["upload_url"]))' | grep -o ".*assets")
          $CURL_ZIP -u "user:${{ secrets.GITHUB_TOKEN }}" -X POST $UPLOAD_URL?name=Dynawo_algorithms_V$VERSION.zip  --data-binary @distributions/Dynawo_algorithms_V$VERSION.zip
          $CURL_ZIP -u "user:${{ secrets.GITHUB_TOKEN }}" -X POST $UPLOAD_URL?name=Dynawo_algorithms_headers_V$VERSION.zip  --data-binary @distributions/Dynawo_algorithms_headers_V$VERSION.zip

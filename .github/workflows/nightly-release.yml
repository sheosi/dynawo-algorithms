name: Nightly Release

on:
  workflow_dispatch:
  schedule:
    - cron:  "0 0 * * 1-5"

jobs:
  fedora:
    name: Linux Fedora (Release, GCC, cxx11)
    runs-on: ubuntu-latest
    container: dynawo/dynawo-distribution-cxx11:latest
    strategy:
      fail-fast: false
    env:
      DYNAWO_INSTALL_OPENMODELICA: /opt/OpenModelica/Install
      DYNAWO_SRC_OPENMODELICA: /opt/OpenModelica/Source
      DYNAWO_RESULTS_SHOW: "false"
      DYNAWO_BUILD_TYPE: Release
      DYNAWO_CXX11_ENABLED: YES
      DYNAWO_NB_PROCESSORS_USED: 2
      DYNAWO_FORCE_CXX11_ABI: "true"
      VERSION: "1.3.0"
      GH_API: https://api.github.com/repos/sheosi/dynawo-algorithms
      CURL_JSON: 'curl -s -H "Content-Type": "application/json"'
      CURL_ZIP: 'curl -H "Content-Type": "application/zip" --retry 20 --retry-delay 0 --retry-max-time 40'


    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Fetch Dynawo
        run: |
          download_asset() {
            ASSET_URL=$( \
              curl  -u "user: ${{ secrets.GITHUB_TOKEN }}"   \
              -s ${{ github.api_url }}/repos/$1/releases/tags/nightly | python3 -c \
              "import sys, json;l=[x for x in json.load(sys.stdin)['assets'] if x['name']=='$2'];print(str(l[0]['url']) if l else '')" \
            )
            
            if [ ! -z $ASSET_URL ]; then
              curl \
                -J \
                -L \
                -H "Accept: application/octet-stream" \
                -u "user: ${{ secrets.GITHUB_TOKEN }}" \
                "$ASSET_URL" \
                --create-dirs \
                --limit-rate 2M \
                -o "$2"
            else
              echo "Asset not found $2 in $1"
              exit 1
            fi
          }
          
          download_asset sheosi/dynawo Dynawo_headers_Nightly.zip
          
      - name: Extract Dynawo
        run: |
          unzip -qq "Dynawo_headers_Nightly.zip"
          cd ..
          
          # Write
          pwd
          ls
          echo DEBUG write dynawoEnv
          cat > dynawo-algorithms/dynawo/dynawoEnv.txt  << EOF 
          DYNAWO_ADEPT_INSTALL_DIR="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11/adept"
          DYNAWO_BOOST_HOME="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11/boost"
          DYNAWO_BOOST_HOME_DEFAULT="false"
          DYNAWO_BRANCH_NAME="no-branch"
          DYNAWO_BROWSER="firefox"
          DYNAWO_BUILD_DIR="/__w/dynawo/dynawo/build/gcc5.3.1/no-branch/Release-cxx11/shared/dynawo"
          DYNAWO_BUILD_TESTS="OFF"
          DYNAWO_BUILD_TESTS_COVERAGE="OFF"
          DYNAWO_BUILD_TYPE="Release"
          DYNAWO_CMAKE_BUILD_OPTION="-j 2"
          DYNAWO_CMAKE_GENERATOR="Unix Makefiles"
          DYNAWO_COMPILER="GCC"
          DYNAWO_COMPILER_NAME="gcc"
          DYNAWO_COMPILER_VERSION="5.3.1"
          DYNAWO_CURVES_TO_HTML_DIR="/__w/dynawo/dynawo/util/curvesToHtml"
          DYNAWO_CXX11_ENABLED="YES"
          DYNAWO_CXX_COMPILER="/usr/bin/g++"
          DYNAWO_C_COMPILER="/usr/bin/gcc"
          DYNAWO_DEBUG_COMPILER_OPTION="-O0"
          DYNAWO_DEPLOY_DIR="/__w/dynawo/dynawo/deploy/gcc5.3.1/shared/dynawo"
          DYNAWO_ENV_DYNAWO="/__w/dynawo/dynawo/util/envDynawo.sh"
          DYNAWO_FLOT_DOWNLOAD_URL="https://github.com/flot/flot/archive"
          DYNAWO_FORCE_CXX11_ABI="true"
          DYNAWO_GMOCK_HOME_DEFAULT="true"
          DYNAWO_GTEST_HOME_DEFAULT="true"
          DYNAWO_HOME="/__w/dynawo/dynawo"
          DYNAWO_INSTALL_DIR="/__w/dynawo/dynawo/install/gcc5.3.1/no-branch/Release-cxx11/shared/dynawo"
          DYNAWO_INSTALL_OPENMODELICA="/opt/OpenModelica/Install"
          DYNAWO_JQUERY_DOWNLOAD_URL="https://github.com/jquery/jquery/archive"
          DYNAWO_LIBARCHIVE_HOME="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11/libarchive"
          DYNAWO_LIBARCHIVE_HOME_DEFAULT="false"
          DYNAWO_LIBIIDM_EXTENSIONS="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11/libiidm/lib"
          DYNAWO_LIBIIDM_HOME="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11/libiidm"
          DYNAWO_LIBIIDM_INSTALL_DIR="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11/libiidm"
          DYNAWO_LIBXML2_HOME="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11/libxml2"
          DYNAWO_LIBXML2_HOME_DEFAULT="false"
          DYNAWO_LIBXML_HOME="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11/libxml"
          DYNAWO_LIBXML_INSTALL_DIR="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11/libxml"
          DYNAWO_LIBZIP_HOME="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11/libzip"
          DYNAWO_LIBZIP_INSTALL_DIR="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11/libzip"
          DYNAWO_LOCALE="en_GB"
          DYNAWO_MODELICA_LIB="3.2.3"
          DYNAWO_NB_PROCESSORS_USED="2"
          DYNAWO_NICSLU_INSTALL_DIR="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11/nicslu"
          DYNAWO_NRT_DIFF_DIR="/__w/dynawo/dynawo/util/nrt_diff"
          DYNAWO_NRT_DIR="/__w/dynawo/dynawo/nrt"
          DYNAWO_OPENMODELICA_VERSION="1_13_2"
          DYNAWO_PDFVIEWER="xdg-open"
          DYNAWO_PYTHON_COMMAND="python"
          DYNAWO_RESOURCES_DIR="/__w/dynawo/dynawo/install/gcc5.3.1/no-branch/Release-cxx11/shared/dynawo/share:/__w/dynawo/dynawo/install/gcc5.3.1/no-branch/Release-cxx11/shared/dynawo/share/xsd"
          DYNAWO_RESULTS_SHOW="false"
          DYNAWO_SCRIPTS_DIR="/__w/dynawo/dynawo/install/gcc5.3.1/no-branch/Release-cxx11/shared/dynawo/sbin"
          DYNAWO_SHARED_LIBRARY_SUFFIX="so"
          DYNAWO_SRC_DIR="/__w/dynawo/dynawo/dynawo"
          DYNAWO_SRC_OPENMODELICA="/opt/OpenModelica/Source"
          DYNAWO_SUITESPARSE_INSTALL_DIR="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11/suitesparse"
          DYNAWO_SUNDIALS_INSTALL_DIR="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11/sundials"
          DYNAWO_THIRD_PARTY_BUILD_DIR="/__w/dynawo/dynawo/build/3rdParty/gcc5.3.1/shared/Release-cxx11"
          DYNAWO_THIRD_PARTY_BUILD_DIR_VERSION="/__w/dynawo/dynawo/build/3rdParty/gcc5.3.1/shared/Release-cxx11"
          DYNAWO_THIRD_PARTY_INSTALL_DIR="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11"
          DYNAWO_THIRD_PARTY_INSTALL_DIR_VERSION="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11"
          DYNAWO_THIRD_PARTY_SRC_DIR="/__w/dynawo/dynawo/dynawo/3rdParty"
          DYNAWO_TIMELINE_FILTER_DIR="/__w/dynawo/dynawo/util/timeline_filter"
          DYNAWO_USE_ADEPT="YES"
          DYNAWO_USE_LEGACY_IIDM="NO"
          DYNAWO_USE_XSD_VALIDATION="true"
          DYNAWO_XERCESC_INSTALL_DIR="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11/xerces-c"
          DYNAWO_ZLIB_HOME="/__w/dynawo/dynawo/install/3rdParty/gcc5.3.1/shared/Release-cxx11/zlib"
          DYNAWO_ZLIB_HOME_DEFAULT="false"
          EOF
          
          echo "Debug. env file"
          cat dynawo-algorithms/dynawo/dynawoEnv.txt


      - name: Build
        run: |
          export DYNAWO_HOME=$(pwd)/dynawo
          export DYNAWO_ALGORITHMS_HOME=$(pwd)
          util/envDynawoAlgorithms.sh build
      
      - name: Prepare files
        run: |
          export DYNAWO_HOME=$(pwd)/dynawo
          export DYNAWO_ALGORITHMS_HOME=$(pwd)
          util/envDynawoAlgorithms.sh distrib
          util/envDynawoAlgorithms.sh distrib-headers

      - name: Delete old tag and release
        run: |
          $CURL_JSON -u "user:${{ secrets.GITHUB_TOKEN }}" -w '%{http_code}\n'  -X DELETE  "$GH_API/git/refs/tags/nightly"
          RELEASE_ID=$( $CURL_JSON -X GET "$GH_API/releases" |  python3 -c 'import sys, json;l=[x for x in json.load(sys.stdin) if x["tag_name"]=="nightly"];print(str(l[0]["id"]) if l else "")')
          
          if [ ! -z "$RELEASE_ID" ]; then
            $CURL_JSON -u "user:${{ secrets.GITHUB_TOKEN }}" -w '%{http_code}\n' -X DELETE "$GH_API/releases/$RELEASE_ID"
          else
            echo "Nightly release not found, won't be deleted"
          fi

      - name: Get last commit in master
        id: commit_id
        run: |
          echo "::set-output name=MASTER_COMMIT_ID::$($CURL_JSON -X GET  $GH_API/git/refs/heads/master| python3 -c 'import sys, json; print(json.load(sys.stdin)["object"]["sha"])')"

      - name: Create Nightly Tag
        run: |
          $CURL_JSON -u "user:${{ secrets.GITHUB_TOKEN }}" -w '%{http_code}\n' -X POST  -d '{"ref":"refs/tags/nightly", "sha":"${{ steps.commit_id.outputs.MASTER_COMMIT_ID }}" }'  "$GH_API/git/refs"


      - name: Release
        run: |
          $CURL_JSON -X POST -u "user:${{ secrets.GITHUB_TOKEN }}" $GH_API/releases -d $'{"tag_name":"nightly", "target_commitish": "${{ steps.commit_id.outputs.MASTER_COMMIT_ID }}", "name": "Nightly", "body": "Dynawo\'s nightly release. Compiled on *release* settings.\\n\\n **Don\'t use it for production**", "draft": false, "prerelease": true }'
          sleep 60 # Wait for release to be published
          UPLOAD_URL=$(curl -s -X GET $GH_API/releases | python3 -c 'import sys, json;l=[x for x in json.load(sys.stdin) if x["tag_name"]=="nightly"];print(str(l[0]["upload_url"]))' | grep -o ".*assets")
          $CURL_ZIP -u "user:${{ secrets.GITHUB_TOKEN }}" -X POST $UPLOAD_URL?name=Dynawo_algorithms_Nightly.zip  -H "Content-Type: application/zip" --retry 20 --retry-delay 0 --retry-max-time 40 --data-binary @distributions/Dynawo_algorithms_V$VERSION.zip
          $CURL_ZIP -u "user:${{ secrets.GITHUB_TOKEN }}" -X POST $UPLOAD_URL?name=Dynawo_algorithms_headers_Nightly.zip  -H "Content-Type: application/zip" --retry 20 --retry-delay 0 --retry-max-time 40 --data-binary @distributions/Dynawo_algorithms_headers_V$VERSION.zip
